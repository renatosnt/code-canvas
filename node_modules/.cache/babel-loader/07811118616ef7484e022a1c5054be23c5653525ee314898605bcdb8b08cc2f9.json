{"ast":null,"code":"var _jsxFileName = \"/home/renato/Documents/code-canvas/src/Grid.js\",\n  _s = $RefreshSig$();\nimport { findAllByTestId } from \"@testing-library/react\";\nimport React from \"react\";\nimport Node from \"./Node\";\nimport \"./Grid.css\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  function gridConstructor() {\n    const initialGrid = [];\n    const sizeRows = gridSize[0];\n    const sizeCols = gridSize[1];\n    for (let i = 0; i <= sizeRows; i++) {\n      const row = [];\n      for (let j = 0; j <= sizeCols; j++) {\n        row.push(nodeConstructor(i, j));\n      }\n      initialGrid.push(row);\n    }\n    return initialGrid;\n  }\n  const [gridSize, setGridSize] = React.useState([15, 25]);\n  const [start, setStart] = React.useState([5, 0]);\n  const [finish, setFinish] = React.useState([5, 24]);\n  const [grid, setGrid] = React.useState(gridConstructor());\n  function nodeConstructor(row, col) {\n    const node = {\n      row,\n      col,\n      isStart: row === start[0] && col === start[1],\n      isFinish: row === finish[0] && col === finish[1],\n      isWall: false\n    };\n    return node;\n  }\n\n  /**\n   * Constrói o grid inicial, com cada nó sendo um objeto com informações necessárias\n   * para rodarmos os algoritmos sobre eles.\n   * @returns grid\n   */\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map(node => /*#__PURE__*/_createElement(Node, {\n          ...node,\n          key: node.col,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }\n        }))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"jMaSm+5Lu97NcGen92lSRP6mcV4=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["findAllByTestId","React","Node","Grid","gridConstructor","initialGrid","sizeRows","gridSize","sizeCols","i","row","j","push","nodeConstructor","setGridSize","useState","start","setStart","finish","setFinish","grid","setGrid","col","node","isStart","isFinish","isWall","map"],"sources":["/home/renato/Documents/code-canvas/src/Grid.js"],"sourcesContent":["import { findAllByTestId } from \"@testing-library/react\";\nimport React from \"react\";\nimport Node from \"./Node\";\nimport \"./Grid.css\";\n\nconst Grid = () => {\n  function gridConstructor() {\n    const initialGrid = [];\n    const sizeRows = gridSize[0];\n    const sizeCols = gridSize[1];\n\n    for (let i = 0; i <= sizeRows; i++) {\n      const row = [];\n      for (let j = 0; j <= sizeCols; j++) {\n        row.push(nodeConstructor(i, j));\n      }\n      initialGrid.push(row);\n    }\n    return initialGrid;\n  }\n  const [gridSize, setGridSize] = React.useState([15, 25]);\n  const [start, setStart] = React.useState([5, 0]);\n  const [finish, setFinish] = React.useState([5, 24]);\n  const [grid, setGrid] = React.useState(gridConstructor());\n\n  function nodeConstructor(row, col) {\n    const node = {\n      row,\n      col,\n      isStart: row === start[0] && col === start[1],\n      isFinish: row === finish[0] && col === finish[1],\n      isWall: false,\n    };\n    return node;\n  }\n\n  /**\n   * Constrói o grid inicial, com cada nó sendo um objeto com informações necessárias\n   * para rodarmos os algoritmos sobre eles.\n   * @returns grid\n   */\n\n  return (\n    <table>\n      <tbody>\n        {grid.map((row, i) => (\n          <tr key={i}>\n            {row.map((node) => (\n              <Node {...node} key={node.col} />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Grid;\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ,wBAAwB;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,YAAY;AAAC;AAAA;AAEpB,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,SAASC,eAAe,GAAG;IACzB,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,QAAQ,GAAGC,QAAQ,CAAC,CAAC,CAAC;IAC5B,MAAMC,QAAQ,GAAGD,QAAQ,CAAC,CAAC,CAAC;IAE5B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,QAAQ,EAAEG,CAAC,EAAE,EAAE;MAClC,MAAMC,GAAG,GAAG,EAAE;MACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,QAAQ,EAAEG,CAAC,EAAE,EAAE;QAClCD,GAAG,CAACE,IAAI,CAACC,eAAe,CAACJ,CAAC,EAAEE,CAAC,CAAC,CAAC;MACjC;MACAN,WAAW,CAACO,IAAI,CAACF,GAAG,CAAC;IACvB;IACA,OAAOL,WAAW;EACpB;EACA,MAAM,CAACE,QAAQ,EAAEO,WAAW,CAAC,GAAGb,KAAK,CAACc,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACxD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,KAAK,CAACc,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGlB,KAAK,CAACc,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACnD,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGpB,KAAK,CAACc,QAAQ,CAACX,eAAe,EAAE,CAAC;EAEzD,SAASS,eAAe,CAACH,GAAG,EAAEY,GAAG,EAAE;IACjC,MAAMC,IAAI,GAAG;MACXb,GAAG;MACHY,GAAG;MACHE,OAAO,EAAEd,GAAG,KAAKM,KAAK,CAAC,CAAC,CAAC,IAAIM,GAAG,KAAKN,KAAK,CAAC,CAAC,CAAC;MAC7CS,QAAQ,EAAEf,GAAG,KAAKQ,MAAM,CAAC,CAAC,CAAC,IAAII,GAAG,KAAKJ,MAAM,CAAC,CAAC,CAAC;MAChDQ,MAAM,EAAE;IACV,CAAC;IACD,OAAOH,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;;EAEE,oBACE;IAAA,uBACE;MAAA,UACGH,IAAI,CAACO,GAAG,CAAC,CAACjB,GAAG,EAAED,CAAC,kBACf;QAAA,UACGC,GAAG,CAACiB,GAAG,CAAEJ,IAAI,iBACZ,eAAC,IAAI;UAAA,GAAKA,IAAI;UAAE,GAAG,EAAEA,IAAI,CAACD,GAAI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAC/B;MAAC,GAHKb,CAAC;QAAA;QAAA;QAAA;MAAA,QAKX;IAAC;MAAA;MAAA;MAAA;IAAA;EACI;IAAA;IAAA;IAAA;EAAA,QACF;AAEZ,CAAC;AAAC,GAlDIN,IAAI;AAAA,KAAJA,IAAI;AAoDV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}