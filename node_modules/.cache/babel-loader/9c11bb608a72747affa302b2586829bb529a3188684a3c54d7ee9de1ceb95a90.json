{"ast":null,"code":"export function bfs(grid,startNode,finishNode){var path=[];var stack=[startNode];while(stack.length){var currentNode=stack.shift();if(currentNode===finishNode)return path;if(!currentNode.isWall&&(currentNode.isStart||!currentNode.isVisited)){currentNode.isVisited=true;path.push(currentNode);var col=currentNode.col,row=currentNode.row;var nextNode=void 0;if(row>0){nextNode=grid[row-1][col];if(!nextNode.isVisited){nextNode.previousNode=currentNode;stack.push(nextNode);}}if(row<grid.length-1){nextNode=grid[row+1][col];if(!nextNode.isVisited){nextNode.previousNode=currentNode;stack.push(nextNode);}}if(col>0){nextNode=grid[row][col-1];if(!nextNode.isVisited){nextNode.previousNode=currentNode;stack.push(nextNode);}}if(col<grid[0].length-1){nextNode=grid[row][col+1];if(!nextNode.isVisited){nextNode.previousNode=currentNode;stack.push(nextNode);}}}}// return path;\n}","map":{"version":3,"names":["bfs","grid","startNode","finishNode","path","stack","length","currentNode","shift","isWall","isStart","isVisited","push","col","row","nextNode","previousNode"],"sources":["/home/renato/Documents/code-canvas/src/algorithms/bfs.js"],"sourcesContent":["export function bfs(grid, startNode, finishNode) {\n  const path = [];\n  let stack = [startNode];\n  while (stack.length) {\n    const currentNode = stack.shift();\n    if (currentNode === finishNode) return path;\n\n    if (\n      !currentNode.isWall &&\n      (currentNode.isStart || !currentNode.isVisited)\n    ) {\n      currentNode.isVisited = true;\n      path.push(currentNode);\n      const { col, row } = currentNode;\n      let nextNode;\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          stack.push(nextNode);\n        }\n      }\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          stack.push(nextNode);\n        }\n      }\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          stack.push(nextNode);\n        }\n      }\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n        if (!nextNode.isVisited) {\n          nextNode.previousNode = currentNode;\n          stack.push(nextNode);\n        }\n      }\n    }\n  }\n  // return path;\n}\n"],"mappings":"AAAA,MAAO,SAASA,IAAG,CAACC,IAAI,CAAEC,SAAS,CAAEC,UAAU,CAAE,CAC/C,GAAMC,KAAI,CAAG,EAAE,CACf,GAAIC,MAAK,CAAG,CAACH,SAAS,CAAC,CACvB,MAAOG,KAAK,CAACC,MAAM,CAAE,CACnB,GAAMC,YAAW,CAAGF,KAAK,CAACG,KAAK,EAAE,CACjC,GAAID,WAAW,GAAKJ,UAAU,CAAE,MAAOC,KAAI,CAE3C,GACE,CAACG,WAAW,CAACE,MAAM,GAClBF,WAAW,CAACG,OAAO,EAAI,CAACH,WAAW,CAACI,SAAS,CAAC,CAC/C,CACAJ,WAAW,CAACI,SAAS,CAAG,IAAI,CAC5BP,IAAI,CAACQ,IAAI,CAACL,WAAW,CAAC,CACtB,GAAQM,IAAG,CAAUN,WAAW,CAAxBM,GAAG,CAAEC,GAAG,CAAKP,WAAW,CAAnBO,GAAG,CAChB,GAAIC,SAAQ,QACZ,GAAID,GAAG,CAAG,CAAC,CAAE,CACXC,QAAQ,CAAGd,IAAI,CAACa,GAAG,CAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAC7B,GAAI,CAACE,QAAQ,CAACJ,SAAS,CAAE,CACvBI,QAAQ,CAACC,YAAY,CAAGT,WAAW,CACnCF,KAAK,CAACO,IAAI,CAACG,QAAQ,CAAC,CACtB,CACF,CACA,GAAID,GAAG,CAAGb,IAAI,CAACK,MAAM,CAAG,CAAC,CAAE,CACzBS,QAAQ,CAAGd,IAAI,CAACa,GAAG,CAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAC7B,GAAI,CAACE,QAAQ,CAACJ,SAAS,CAAE,CACvBI,QAAQ,CAACC,YAAY,CAAGT,WAAW,CACnCF,KAAK,CAACO,IAAI,CAACG,QAAQ,CAAC,CACtB,CACF,CACA,GAAIF,GAAG,CAAG,CAAC,CAAE,CACXE,QAAQ,CAAGd,IAAI,CAACa,GAAG,CAAC,CAACD,GAAG,CAAG,CAAC,CAAC,CAC7B,GAAI,CAACE,QAAQ,CAACJ,SAAS,CAAE,CACvBI,QAAQ,CAACC,YAAY,CAAGT,WAAW,CACnCF,KAAK,CAACO,IAAI,CAACG,QAAQ,CAAC,CACtB,CACF,CACA,GAAIF,GAAG,CAAGZ,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,CAAG,CAAC,CAAE,CAC5BS,QAAQ,CAAGd,IAAI,CAACa,GAAG,CAAC,CAACD,GAAG,CAAG,CAAC,CAAC,CAC7B,GAAI,CAACE,QAAQ,CAACJ,SAAS,CAAE,CACvBI,QAAQ,CAACC,YAAY,CAAGT,WAAW,CACnCF,KAAK,CAACO,IAAI,CAACG,QAAQ,CAAC,CACtB,CACF,CACF,CACF,CACA;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}