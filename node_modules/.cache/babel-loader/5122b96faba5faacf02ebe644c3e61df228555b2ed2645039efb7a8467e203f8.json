{"ast":null,"code":"/**\n *\n * @param {matriz de objetos} grid\n * @param {objeto Node} start\n * @param {objeto Node} finish\n */\n\n// {\n//   row,\n//   col,\n//   isStart,\n//   isFinish,\n//   isWall,\n//   isVisited,\n//   onMouseDown,\n//   onMouseUp,\n//   onMouseEnter,\n// }\n\nexport function dfs(grid, start, finish) {\n  const [numRows, numCols] = [grid.length, grid[0].length];\n  const visited = Set();\n  const path = [];\n  function dfsAux(curr) {\n    if (!curr || curr.row >= numRows || curr.col >= numCols || curr.row < 0 || curr.col < 0 || visited.has(curr) || curr.isWall) {\n      return;\n    }\n    visited.add(curr);\n    const [i, j] = [curr.row, curr.col];\n    dfsAux(grid[i][j + 1]);\n    dfsAux(grid[i][j]);\n    dfsAux(grid[i][j]);\n    dfsAux(grid[i][j]);\n  }\n\n  // def dfs(i, j):\n  //     if i >= len(grid) or j >= len(grid[0]) or i < 0 or j < 0 or \\\n  //      grid[i][j] == \"0\" or (i, j) in visited:\n  //         return\n  //     visited.add((i, j))\n  //     dfs(i, j + 1)\n  //     dfs(i + 1, j)\n  //     dfs(i - 1, j)\n  //     dfs(i, j - 1)\n}","map":{"version":3,"names":["dfs","grid","start","finish","numRows","numCols","length","visited","Set","path","dfsAux","curr","row","col","has","isWall","add","i","j"],"sources":["/home/renato/Documents/code-canvas/src/algorithms/dfs.js"],"sourcesContent":["/**\n *\n * @param {matriz de objetos} grid\n * @param {objeto Node} start\n * @param {objeto Node} finish\n */\n\n// {\n//   row,\n//   col,\n//   isStart,\n//   isFinish,\n//   isWall,\n//   isVisited,\n//   onMouseDown,\n//   onMouseUp,\n//   onMouseEnter,\n// }\n\nexport function dfs(grid, start, finish) {\n  const [numRows, numCols] = [grid.length, grid[0].length];\n  const visited = Set();\n  const path = [];\n\n  function dfsAux(curr) {\n    if (\n      !curr ||\n      curr.row >= numRows ||\n      curr.col >= numCols ||\n      curr.row < 0 ||\n      curr.col < 0 ||\n      visited.has(curr) ||\n      curr.isWall\n    ) {\n      return;\n    }\n    visited.add(curr);\n    const [i, j] = [curr.row, curr.col];\n    dfsAux(grid[i][j + 1]);\n    dfsAux(grid[i][j]);\n    dfsAux(grid[i][j]);\n    dfsAux(grid[i][j]);\n  }\n\n  // def dfs(i, j):\n  //     if i >= len(grid) or j >= len(grid[0]) or i < 0 or j < 0 or \\\n  //      grid[i][j] == \"0\" or (i, j) in visited:\n  //         return\n  //     visited.add((i, j))\n  //     dfs(i, j + 1)\n  //     dfs(i + 1, j)\n  //     dfs(i - 1, j)\n  //     dfs(i, j - 1)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACvC,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAG,CAACJ,IAAI,CAACK,MAAM,EAAEL,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC;EACxD,MAAMC,OAAO,GAAGC,GAAG,EAAE;EACrB,MAAMC,IAAI,GAAG,EAAE;EAEf,SAASC,MAAM,CAACC,IAAI,EAAE;IACpB,IACE,CAACA,IAAI,IACLA,IAAI,CAACC,GAAG,IAAIR,OAAO,IACnBO,IAAI,CAACE,GAAG,IAAIR,OAAO,IACnBM,IAAI,CAACC,GAAG,GAAG,CAAC,IACZD,IAAI,CAACE,GAAG,GAAG,CAAC,IACZN,OAAO,CAACO,GAAG,CAACH,IAAI,CAAC,IACjBA,IAAI,CAACI,MAAM,EACX;MACA;IACF;IACAR,OAAO,CAACS,GAAG,CAACL,IAAI,CAAC;IACjB,MAAM,CAACM,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACP,IAAI,CAACC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC;IACnCH,MAAM,CAACT,IAAI,CAACgB,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;IACtBR,MAAM,CAACT,IAAI,CAACgB,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;IAClBR,MAAM,CAACT,IAAI,CAACgB,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;IAClBR,MAAM,CAACT,IAAI,CAACgB,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;EACpB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}