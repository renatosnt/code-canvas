{"ast":null,"code":"export function bfs(grid, startNode, finishNode) {\n  const totalPath = [];\n  const queue = [];\n  queue.push(startNode);\n  while (queue.length) {\n    const curr = queue.shift();\n    if (curr === finishNode) return totalPath;\n    if (!curr.isWall && !curr.isVisited) {\n      curr.isVisited = true;\n      totalPath.push(curr);\n      const [i, j] = [curr.row, curr.col];\n      if (i + 1 < numRows && !grid[i + 1][j].isVisited && !grid[i + 1][j].isWall) {\n        queue.push(grid[i + 1][j]);\n      }\n\n      // esquerda\n      if (j - 1 >= 0 && !grid[i][j - 1].isVisited && !grid[i][j - 1].isWall) {\n        queue.push(grid[i][j - 1]);\n      }\n      // cima\n      if (i - 1 >= 0 && !grid[i - 1][j].isVisited && !grid[i - 1][j].isWall) {\n        queue.push(grid[i - 1][j]);\n      }\n\n      // direita\n      if (j + 1 < numCols && !grid[i][j + 1].isVisited && !grid[i][j + 1].isWall) {\n        queue.push(grid[i][j + 1]);\n      }\n    }\n  }\n}","map":{"version":3,"names":["bfs","grid","startNode","finishNode","totalPath","queue","push","length","curr","shift","isWall","isVisited","i","j","row","col","numRows","numCols"],"sources":["/home/renato/Documents/code-canvas/src/algorithms/bfs.js"],"sourcesContent":["export function bfs(grid, startNode, finishNode) {\n  const totalPath = [];\n  const queue = [];\n  queue.push(startNode);\n  while (queue.length) {\n    const curr = queue.shift();\n    if (curr === finishNode) return totalPath;\n\n    if (!curr.isWall && !curr.isVisited) {\n      curr.isVisited = true;\n      totalPath.push(curr);\n      const [i, j] = [curr.row, curr.col];\n      if (\n        i + 1 < numRows &&\n        !grid[i + 1][j].isVisited &&\n        !grid[i + 1][j].isWall\n      ) {\n        queue.push(grid[i + 1][j]);\n      }\n\n      // esquerda\n      if (j - 1 >= 0 && !grid[i][j - 1].isVisited && !grid[i][j - 1].isWall) {\n        queue.push(grid[i][j - 1]);\n      }\n      // cima\n      if (i - 1 >= 0 && !grid[i - 1][j].isVisited && !grid[i - 1][j].isWall) {\n        queue.push(grid[i - 1][j]);\n      }\n\n      // direita\n      if (\n        j + 1 < numCols &&\n        !grid[i][j + 1].isVisited &&\n        !grid[i][j + 1].isWall\n      ) {\n        queue.push(grid[i][j + 1]);\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EAC/C,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAMC,KAAK,GAAG,EAAE;EAChBA,KAAK,CAACC,IAAI,CAACJ,SAAS,CAAC;EACrB,OAAOG,KAAK,CAACE,MAAM,EAAE;IACnB,MAAMC,IAAI,GAAGH,KAAK,CAACI,KAAK,EAAE;IAC1B,IAAID,IAAI,KAAKL,UAAU,EAAE,OAAOC,SAAS;IAEzC,IAAI,CAACI,IAAI,CAACE,MAAM,IAAI,CAACF,IAAI,CAACG,SAAS,EAAE;MACnCH,IAAI,CAACG,SAAS,GAAG,IAAI;MACrBP,SAAS,CAACE,IAAI,CAACE,IAAI,CAAC;MACpB,MAAM,CAACI,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACL,IAAI,CAACM,GAAG,EAAEN,IAAI,CAACO,GAAG,CAAC;MACnC,IACEH,CAAC,GAAG,CAAC,GAAGI,OAAO,IACf,CAACf,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACF,SAAS,IACzB,CAACV,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACH,MAAM,EACtB;QACAL,KAAK,CAACC,IAAI,CAACL,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;MAC5B;;MAEA;MACA,IAAIA,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACZ,IAAI,CAACW,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAACF,SAAS,IAAI,CAACV,IAAI,CAACW,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAACH,MAAM,EAAE;QACrEL,KAAK,CAACC,IAAI,CAACL,IAAI,CAACW,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;MAC5B;MACA;MACA,IAAID,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACX,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACF,SAAS,IAAI,CAACV,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACH,MAAM,EAAE;QACrEL,KAAK,CAACC,IAAI,CAACL,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;MAC5B;;MAEA;MACA,IACEA,CAAC,GAAG,CAAC,GAAGI,OAAO,IACf,CAAChB,IAAI,CAACW,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAACF,SAAS,IACzB,CAACV,IAAI,CAACW,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAACH,MAAM,EACtB;QACAL,KAAK,CAACC,IAAI,CAACL,IAAI,CAACW,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;MAC5B;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}