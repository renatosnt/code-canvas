{"ast":null,"code":"/**\n *\n * @param {matriz de objetos} grid\n * @param {objeto Node} start\n * @param {objeto Node} finish\n */\n\n// {\n//   row,\n//   col,\n//   isStart,\n//   isFinish,\n//   isWall,\n//   isVisited,\n//   onMouseDown,\n//   onMouseUp,\n//   onMouseEnter,\n// }\n\nexport function dfs(grid, start, finish) {\n  const [numRows, numCols] = [grid.length, grid[0].length];\n  const visited = new Set();\n  const path = [];\n  console.log(\"tamanho grid\", numRows, numCols);\n  function dfsAux(i, j) {\n    console.log(\"dfsAux\", i, j);\n    if (i > numRows || j > numCols || i < 0 || j < 0 || visited.has([i, j])) {\n      return;\n    }\n    path.push([i, j]);\n    console.log(\"visitando\", [i, j]);\n    visited.add([i, j]);\n    if (!grid[i][j].isFinish) {\n      dfsAux(i, j + 1);\n      dfsAux(i + 1, j);\n      dfsAux(i - 1, j);\n      dfsAux(i, j - 1);\n    }\n    return true;\n  }\n  console.log(\"dfsAux\", start.row, start.col);\n  dfsAux(start.row, start.col);\n  return path;\n  // def dfs(i, j):\n  //     if i >= len(grid) or j >= len(grid[0]) or i < 0 or j < 0 or \\\n  //      grid[i][j] == \"0\" or (i, j) in visited:\n  //         return\n  //     visited.add((i, j))\n  //     dfs(i, j + 1)\n  //     dfs(i + 1, j)\n  //     dfs(i - 1, j)\n  //     dfs(i, j - 1)\n}","map":{"version":3,"names":["dfs","grid","start","finish","numRows","numCols","length","visited","Set","path","console","log","dfsAux","i","j","has","push","add","isFinish","row","col"],"sources":["/home/renato/Documents/code-canvas/src/algorithms/dfs.js"],"sourcesContent":["/**\n *\n * @param {matriz de objetos} grid\n * @param {objeto Node} start\n * @param {objeto Node} finish\n */\n\n// {\n//   row,\n//   col,\n//   isStart,\n//   isFinish,\n//   isWall,\n//   isVisited,\n//   onMouseDown,\n//   onMouseUp,\n//   onMouseEnter,\n// }\n\nexport function dfs(grid, start, finish) {\n  const [numRows, numCols] = [grid.length, grid[0].length];\n  const visited = new Set();\n  const path = [];\n  console.log(\"tamanho grid\", numRows, numCols);\n\n  function dfsAux(i, j) {\n    console.log(\"dfsAux\", i, j);\n    if (i > numRows || j > numCols || i < 0 || j < 0 || visited.has([i, j])) {\n      return;\n    }\n\n    path.push([i, j]);\n    console.log(\"visitando\", [i, j]);\n    visited.add([i, j]);\n    if (!grid[i][j].isFinish) {\n      dfsAux(i, j + 1);\n      dfsAux(i + 1, j);\n      dfsAux(i - 1, j);\n      dfsAux(i, j - 1);\n    }\n    return true;\n  }\n  console.log(\"dfsAux\", start.row, start.col);\n  dfsAux(start.row, start.col);\n  return path;\n  // def dfs(i, j):\n  //     if i >= len(grid) or j >= len(grid[0]) or i < 0 or j < 0 or \\\n  //      grid[i][j] == \"0\" or (i, j) in visited:\n  //         return\n  //     visited.add((i, j))\n  //     dfs(i, j + 1)\n  //     dfs(i + 1, j)\n  //     dfs(i - 1, j)\n  //     dfs(i, j - 1)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACvC,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAG,CAACJ,IAAI,CAACK,MAAM,EAAEL,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC;EACxD,MAAMC,OAAO,GAAG,IAAIC,GAAG,EAAE;EACzB,MAAMC,IAAI,GAAG,EAAE;EACfC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEP,OAAO,EAAEC,OAAO,CAAC;EAE7C,SAASO,MAAM,CAACC,CAAC,EAAEC,CAAC,EAAE;IACpBJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEE,CAAC,EAAEC,CAAC,CAAC;IAC3B,IAAID,CAAC,GAAGT,OAAO,IAAIU,CAAC,GAAGT,OAAO,IAAIQ,CAAC,GAAG,CAAC,IAAIC,CAAC,GAAG,CAAC,IAAIP,OAAO,CAACQ,GAAG,CAAC,CAACF,CAAC,EAAEC,CAAC,CAAC,CAAC,EAAE;MACvE;IACF;IAEAL,IAAI,CAACO,IAAI,CAAC,CAACH,CAAC,EAAEC,CAAC,CAAC,CAAC;IACjBJ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,CAACE,CAAC,EAAEC,CAAC,CAAC,CAAC;IAChCP,OAAO,CAACU,GAAG,CAAC,CAACJ,CAAC,EAAEC,CAAC,CAAC,CAAC;IACnB,IAAI,CAACb,IAAI,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,CAACI,QAAQ,EAAE;MACxBN,MAAM,CAACC,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC;MAChBF,MAAM,CAACC,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC;MAChBF,MAAM,CAACC,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC;MAChBF,MAAM,CAACC,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC;IAClB;IACA,OAAO,IAAI;EACb;EACAJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAET,KAAK,CAACiB,GAAG,EAAEjB,KAAK,CAACkB,GAAG,CAAC;EAC3CR,MAAM,CAACV,KAAK,CAACiB,GAAG,EAAEjB,KAAK,CAACkB,GAAG,CAAC;EAC5B,OAAOX,IAAI;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}