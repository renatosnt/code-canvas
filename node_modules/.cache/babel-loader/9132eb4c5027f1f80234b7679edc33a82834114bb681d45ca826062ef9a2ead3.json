{"ast":null,"code":"var _jsxFileName = \"/home/renato/Documents/code-canvas/src/Grid.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Node from \"./Node\";\nimport \"./Grid.css\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const [gridSize, setGridSize] = React.useState([15, 25]);\n  const [start, setStart] = React.useState([5, 0]);\n  const [finish, setFinish] = React.useState([5, 25]);\n  const [isDrawing, setIsDrawing] = React.useState(false);\n  const [isMoving, setIsMoving] = React.useState(false);\n  const [grid, setGrid] = React.useState(gridConstructor());\n  function nodeConstructor(row, col) {\n    const node = {\n      row,\n      col,\n      isStart: row === start[0] && col === start[1],\n      isFinish: row === finish[0] && col === finish[1],\n      isWall: false\n    };\n    return node;\n  }\n  function gridConstructor() {\n    const initialGrid = [];\n    const sizeRows = gridSize[0];\n    const sizeCols = gridSize[1];\n    for (let i = 0; i <= sizeRows; i++) {\n      const row = [];\n      for (let j = 0; j <= sizeCols; j++) {\n        row.push(nodeConstructor(i, j));\n      }\n      initialGrid.push(row);\n    }\n    return initialGrid;\n  }\n  function startDrawing(event, row, col) {\n    event.preventDefault();\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      setIsDrawing(true);\n    }\n  }\n  function finishDrawing(event) {\n    event.preventDefault();\n    setIsDrawing(false);\n  }\n  function draw(_ref, row, col) {\n    let {\n      target\n    } = _ref;\n    if (isDrawing && !grid[row][col].isStart && !grid[row][col].isFinish) {\n      target.className += \" wall\";\n      const newGrid = grid;\n      newGrid[row][col].isWall = true;\n      setGrid(newGrid);\n    }\n  }\n  function moveNode(event, row, col) {\n    event.preventDefault();\n    if (grid[row][col].isStart || grid[row][col].isFinish) {\n      setIsMoving(true);\n      event;\n    }\n  }\n\n  //\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"grid\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: grid.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map(node => /*#__PURE__*/_createElement(Node, {\n          ...node,\n          key: node.col,\n          onMouseDown: event => startDrawing(event, node.row, node.col),\n          onMouseUp: event => finishDrawing(event),\n          onMouseEnter: event => draw(event, node.row, node.col),\n          onClick: event => moveNode(event, node.row, node.col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }\n        }))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"zotGzQc8Sqe5tzx4YIaJr9TiR3s=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","Node","Grid","gridSize","setGridSize","useState","start","setStart","finish","setFinish","isDrawing","setIsDrawing","isMoving","setIsMoving","grid","setGrid","gridConstructor","nodeConstructor","row","col","node","isStart","isFinish","isWall","initialGrid","sizeRows","sizeCols","i","j","push","startDrawing","event","preventDefault","finishDrawing","draw","target","className","newGrid","moveNode","map"],"sources":["/home/renato/Documents/code-canvas/src/Grid.js"],"sourcesContent":["import React from \"react\";\nimport Node from \"./Node\";\nimport \"./Grid.css\";\n\nconst Grid = () => {\n  const [gridSize, setGridSize] = React.useState([15, 25]);\n  const [start, setStart] = React.useState([5, 0]);\n  const [finish, setFinish] = React.useState([5, 25]);\n  const [isDrawing, setIsDrawing] = React.useState(false);\n  const [isMoving, setIsMoving] = React.useState(false);\n\n  const [grid, setGrid] = React.useState(gridConstructor());\n\n  function nodeConstructor(row, col) {\n    const node = {\n      row,\n      col,\n      isStart: row === start[0] && col === start[1],\n      isFinish: row === finish[0] && col === finish[1],\n      isWall: false,\n    };\n    return node;\n  }\n\n  function gridConstructor() {\n    const initialGrid = [];\n    const sizeRows = gridSize[0];\n    const sizeCols = gridSize[1];\n\n    for (let i = 0; i <= sizeRows; i++) {\n      const row = [];\n      for (let j = 0; j <= sizeCols; j++) {\n        row.push(nodeConstructor(i, j));\n      }\n      initialGrid.push(row);\n    }\n    return initialGrid;\n  }\n\n  function startDrawing(event, row, col) {\n    event.preventDefault();\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      setIsDrawing(true);\n    }\n  }\n\n  function finishDrawing(event) {\n    event.preventDefault();\n    setIsDrawing(false);\n  }\n\n  function draw({ target }, row, col) {\n    if (isDrawing && !grid[row][col].isStart && !grid[row][col].isFinish) {\n      target.className += \" wall\";\n      const newGrid = grid;\n      newGrid[row][col].isWall = true;\n      setGrid(newGrid);\n    }\n  }\n\n  function moveNode(event, row, col) {\n    event.preventDefault();\n    if (grid[row][col].isStart || grid[row][col].isFinish) {\n      setIsMoving(true);\n      event;\n    }\n  }\n\n  //\n  return (\n    <table className=\"grid\">\n      <tbody>\n        {grid.map((row, i) => (\n          <tr key={i}>\n            {row.map((node) => (\n              <Node\n                {...node}\n                key={node.col}\n                onMouseDown={(event) => startDrawing(event, node.row, node.col)}\n                onMouseUp={(event) => finishDrawing(event)}\n                onMouseEnter={(event) => draw(event, node.row, node.col)}\n                onClick={(event) => moveNode(event, node.row, node.col)}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Grid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}