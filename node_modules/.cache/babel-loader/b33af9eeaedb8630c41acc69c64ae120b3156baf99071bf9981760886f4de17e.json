{"ast":null,"code":"var _jsxFileName = \"/home/renato/Documents/code-canvas/src/Grid.js\",\n  _s = $RefreshSig$();\nimport { findAllByTestId } from \"@testing-library/react\";\nimport React from \"react\";\nimport Node from \"./Node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  function gridConstructor() {\n    const initialGrid = [];\n    const sizeRows = gridSize[0];\n    const sizeCols = gridSize[1];\n    for (let i = 0; i <= sizeRows; i++) {\n      const row = [];\n      for (let j = 0; j <= sizeCols; j++) {\n        row.push(nodeConstructor(i, j));\n      }\n      initialGrid.push(row);\n    }\n    return initialGrid;\n  }\n  const [grid, setGrid] = React.useState(gridConstructor());\n  const [gridSize, setGridSize] = React.useState([15, 25]);\n  const [start, setStart] = React.useState([5, 0]);\n  const [finish, setFinish] = React.useState([5, 24]);\n  function nodeConstructor(row, col) {\n    const node = {\n      row,\n      col,\n      isStart: row === start[0] && col === start[1],\n      isFinish: row === finish[0] && col === finish[1],\n      isWall: false\n    };\n    return node;\n  }\n\n  /**\n   * Constrói o grid inicial, com cada nó sendo um objeto com informações necessárias\n   * para rodarmos os algoritmos sobre eles.\n   * @returns grid\n   */\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"fTdyKWf6503TpNNPALUKHhX70IM=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["findAllByTestId","React","Node","Grid","gridConstructor","initialGrid","sizeRows","gridSize","sizeCols","i","row","j","push","nodeConstructor","grid","setGrid","useState","setGridSize","start","setStart","finish","setFinish","col","node","isStart","isFinish","isWall"],"sources":["/home/renato/Documents/code-canvas/src/Grid.js"],"sourcesContent":["import { findAllByTestId } from \"@testing-library/react\";\nimport React from \"react\";\nimport Node from \"./Node\";\n\nconst Grid = () => {\n  function gridConstructor() {\n    const initialGrid = [];\n    const sizeRows = gridSize[0];\n    const sizeCols = gridSize[1];\n\n    for (let i = 0; i <= sizeRows; i++) {\n      const row = [];\n      for (let j = 0; j <= sizeCols; j++) {\n        row.push(nodeConstructor(i, j));\n      }\n      initialGrid.push(row);\n    }\n    return initialGrid;\n  }\n  const [grid, setGrid] = React.useState(gridConstructor());\n  const [gridSize, setGridSize] = React.useState([15, 25]);\n  const [start, setStart] = React.useState([5, 0]);\n  const [finish, setFinish] = React.useState([5, 24]);\n\n  function nodeConstructor(row, col) {\n    const node = {\n      row,\n      col,\n      isStart: row === start[0] && col === start[1],\n      isFinish: row === finish[0] && col === finish[1],\n      isWall: false,\n    };\n    return node;\n  }\n\n  /**\n   * Constrói o grid inicial, com cada nó sendo um objeto com informações necessárias\n   * para rodarmos os algoritmos sobre eles.\n   * @returns grid\n   */\n\n  return (\n    <table>\n      <tbody>\n        <tr>{/* map do grid */}</tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default Grid;\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ,wBAAwB;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC;AAE1B,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,SAASC,eAAe,GAAG;IACzB,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,QAAQ,GAAGC,QAAQ,CAAC,CAAC,CAAC;IAC5B,MAAMC,QAAQ,GAAGD,QAAQ,CAAC,CAAC,CAAC;IAE5B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,QAAQ,EAAEG,CAAC,EAAE,EAAE;MAClC,MAAMC,GAAG,GAAG,EAAE;MACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,QAAQ,EAAEG,CAAC,EAAE,EAAE;QAClCD,GAAG,CAACE,IAAI,CAACC,eAAe,CAACJ,CAAC,EAAEE,CAAC,CAAC,CAAC;MACjC;MACAN,WAAW,CAACO,IAAI,CAACF,GAAG,CAAC;IACvB;IACA,OAAOL,WAAW;EACpB;EACA,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGd,KAAK,CAACe,QAAQ,CAACZ,eAAe,EAAE,CAAC;EACzD,MAAM,CAACG,QAAQ,EAAEU,WAAW,CAAC,GAAGhB,KAAK,CAACe,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACxD,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,KAAK,CAACe,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGpB,KAAK,CAACe,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAEnD,SAASH,eAAe,CAACH,GAAG,EAAEY,GAAG,EAAE;IACjC,MAAMC,IAAI,GAAG;MACXb,GAAG;MACHY,GAAG;MACHE,OAAO,EAAEd,GAAG,KAAKQ,KAAK,CAAC,CAAC,CAAC,IAAII,GAAG,KAAKJ,KAAK,CAAC,CAAC,CAAC;MAC7CO,QAAQ,EAAEf,GAAG,KAAKU,MAAM,CAAC,CAAC,CAAC,IAAIE,GAAG,KAAKF,MAAM,CAAC,CAAC,CAAC;MAChDM,MAAM,EAAE;IACV,CAAC;IACD,OAAOH,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;;EAEE,oBACE;IAAA,uBACE;MAAA,uBACE;QAAA;QAAA;QAAA;MAAA;IAA4B;MAAA;MAAA;MAAA;IAAA;EACtB;IAAA;IAAA;IAAA;EAAA,QACF;AAEZ,CAAC;AAAC,GA5CIpB,IAAI;AAAA,KAAJA,IAAI;AA8CV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}