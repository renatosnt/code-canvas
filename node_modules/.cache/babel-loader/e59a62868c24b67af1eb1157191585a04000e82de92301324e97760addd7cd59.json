{"ast":null,"code":"export function bfs(grid, startNode, finishNode) {\n  const totalPath = [];\n  const queue = [];\n  queue.push(startNode);\n  while (queue.length) {\n    const currentNode = queue.shift();\n    if (currentNode === finishNode) return totalPath;\n    if (!currentNode.isWall && !currentNode.isVisited) {\n      currentNode.isVisited = true;\n      totalPath.push(currentNode);\n      if (i + 1 < numRows && !grid[i + 1][j].isVisited && !grid[i + 1][j].isWall) {\n        stack.push(grid[i + 1][j]);\n      }\n\n      // esquerda\n      if (j - 1 >= 0 && !grid[i][j - 1].isVisited && !grid[i][j - 1].isWall) {\n        stack.push(grid[i][j - 1]);\n      }\n      // cima\n      if (i - 1 >= 0 && !grid[i - 1][j].isVisited && !grid[i - 1][j].isWall) {\n        stack.push(grid[i - 1][j]);\n      }\n\n      // direita\n      if (j + 1 < numCols && !grid[i][j + 1].isVisited && !grid[i][j + 1].isWall) {\n        stack.push(grid[i][j + 1]);\n      }\n    }\n  }\n}","map":{"version":3,"names":["bfs","grid","startNode","finishNode","totalPath","queue","push","length","currentNode","shift","isWall","isVisited","i","numRows","j","stack","numCols"],"sources":["/home/renato/Documents/code-canvas/src/algorithms/bfs.js"],"sourcesContent":["export function bfs(grid, startNode, finishNode) {\n  const totalPath = [];\n  const queue = [];\n  queue.push(startNode);\n  while (queue.length) {\n    const currentNode = queue.shift();\n    if (currentNode === finishNode) return totalPath;\n\n    if (!currentNode.isWall && !currentNode.isVisited) {\n      currentNode.isVisited = true;\n      totalPath.push(currentNode);\n      if (\n        i + 1 < numRows &&\n        !grid[i + 1][j].isVisited &&\n        !grid[i + 1][j].isWall\n      ) {\n        stack.push(grid[i + 1][j]);\n      }\n\n      // esquerda\n      if (j - 1 >= 0 && !grid[i][j - 1].isVisited && !grid[i][j - 1].isWall) {\n        stack.push(grid[i][j - 1]);\n      }\n      // cima\n      if (i - 1 >= 0 && !grid[i - 1][j].isVisited && !grid[i - 1][j].isWall) {\n        stack.push(grid[i - 1][j]);\n      }\n\n      // direita\n      if (\n        j + 1 < numCols &&\n        !grid[i][j + 1].isVisited &&\n        !grid[i][j + 1].isWall\n      ) {\n        stack.push(grid[i][j + 1]);\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EAC/C,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAMC,KAAK,GAAG,EAAE;EAChBA,KAAK,CAACC,IAAI,CAACJ,SAAS,CAAC;EACrB,OAAOG,KAAK,CAACE,MAAM,EAAE;IACnB,MAAMC,WAAW,GAAGH,KAAK,CAACI,KAAK,EAAE;IACjC,IAAID,WAAW,KAAKL,UAAU,EAAE,OAAOC,SAAS;IAEhD,IAAI,CAACI,WAAW,CAACE,MAAM,IAAI,CAACF,WAAW,CAACG,SAAS,EAAE;MACjDH,WAAW,CAACG,SAAS,GAAG,IAAI;MAC5BP,SAAS,CAACE,IAAI,CAACE,WAAW,CAAC;MAC3B,IACEI,CAAC,GAAG,CAAC,GAAGC,OAAO,IACf,CAACZ,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC,CAACH,SAAS,IACzB,CAACV,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC,CAACJ,MAAM,EACtB;QACAK,KAAK,CAACT,IAAI,CAACL,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC,CAAC;MAC5B;;MAEA;MACA,IAAIA,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACb,IAAI,CAACW,CAAC,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,CAACH,SAAS,IAAI,CAACV,IAAI,CAACW,CAAC,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,CAACJ,MAAM,EAAE;QACrEK,KAAK,CAACT,IAAI,CAACL,IAAI,CAACW,CAAC,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;MAC5B;MACA;MACA,IAAIF,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACX,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC,CAACH,SAAS,IAAI,CAACV,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC,CAACJ,MAAM,EAAE;QACrEK,KAAK,CAACT,IAAI,CAACL,IAAI,CAACW,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC,CAAC;MAC5B;;MAEA;MACA,IACEA,CAAC,GAAG,CAAC,GAAGE,OAAO,IACf,CAACf,IAAI,CAACW,CAAC,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,CAACH,SAAS,IACzB,CAACV,IAAI,CAACW,CAAC,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,CAACJ,MAAM,EACtB;QACAK,KAAK,CAACT,IAAI,CAACL,IAAI,CAACW,CAAC,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;MAC5B;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}