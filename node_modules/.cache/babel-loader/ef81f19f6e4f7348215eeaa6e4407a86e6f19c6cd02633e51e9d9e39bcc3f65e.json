{"ast":null,"code":"export function bfs(grid, startNode, finishNode) {\n  const totalPath = [];\n  const queue = [];\n  queue.push(startNode);\n  while (queue.length) {\n    const currentNode = queue.shift();\n    if (currentNode === finishNode) return totalPath;\n    if (!currentNode.isWall && !currentNode.isVisited) {\n      currentNode.isVisited = true;\n      totalPath.push(currentNode);\n      const {\n        col,\n        row\n      } = currentNode;\n      let nextNode;\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n        if (!nextNode.isVisited) {\n          queue.push(nextNode);\n        }\n      }\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n        if (!nextNode.isVisited) {\n          queue.push(nextNode);\n        }\n      }\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n        if (!nextNode.isVisited) {\n          queue.push(nextNode);\n        }\n      }\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n        if (!nextNode.isVisited) {\n          queue.push(nextNode);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["bfs","grid","startNode","finishNode","totalPath","queue","push","length","currentNode","shift","isWall","isVisited","col","row","nextNode"],"sources":["/home/renato/Documents/code-canvas/src/algorithms/bfs.js"],"sourcesContent":["export function bfs(grid, startNode, finishNode) {\n  const totalPath = [];\n  const queue = [];\n  queue.push(startNode);\n  while (queue.length) {\n    const currentNode = queue.shift();\n    if (currentNode === finishNode) return totalPath;\n\n    if (!currentNode.isWall && !currentNode.isVisited) {\n      currentNode.isVisited = true;\n      totalPath.push(currentNode);\n      const { col, row } = currentNode;\n      let nextNode;\n      if (row > 0) {\n        nextNode = grid[row - 1][col];\n        if (!nextNode.isVisited) {\n          queue.push(nextNode);\n        }\n      }\n      if (row < grid.length - 1) {\n        nextNode = grid[row + 1][col];\n        if (!nextNode.isVisited) {\n          queue.push(nextNode);\n        }\n      }\n      if (col > 0) {\n        nextNode = grid[row][col - 1];\n        if (!nextNode.isVisited) {\n          queue.push(nextNode);\n        }\n      }\n      if (col < grid[0].length - 1) {\n        nextNode = grid[row][col + 1];\n        if (!nextNode.isVisited) {\n          queue.push(nextNode);\n        }\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EAC/C,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAMC,KAAK,GAAG,EAAE;EAChBA,KAAK,CAACC,IAAI,CAACJ,SAAS,CAAC;EACrB,OAAOG,KAAK,CAACE,MAAM,EAAE;IACnB,MAAMC,WAAW,GAAGH,KAAK,CAACI,KAAK,EAAE;IACjC,IAAID,WAAW,KAAKL,UAAU,EAAE,OAAOC,SAAS;IAEhD,IAAI,CAACI,WAAW,CAACE,MAAM,IAAI,CAACF,WAAW,CAACG,SAAS,EAAE;MACjDH,WAAW,CAACG,SAAS,GAAG,IAAI;MAC5BP,SAAS,CAACE,IAAI,CAACE,WAAW,CAAC;MAC3B,MAAM;QAAEI,GAAG;QAAEC;MAAI,CAAC,GAAGL,WAAW;MAChC,IAAIM,QAAQ;MACZ,IAAID,GAAG,GAAG,CAAC,EAAE;QACXC,QAAQ,GAAGb,IAAI,CAACY,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC;QAC7B,IAAI,CAACE,QAAQ,CAACH,SAAS,EAAE;UACvBN,KAAK,CAACC,IAAI,CAACQ,QAAQ,CAAC;QACtB;MACF;MACA,IAAID,GAAG,GAAGZ,IAAI,CAACM,MAAM,GAAG,CAAC,EAAE;QACzBO,QAAQ,GAAGb,IAAI,CAACY,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC;QAC7B,IAAI,CAACE,QAAQ,CAACH,SAAS,EAAE;UACvBN,KAAK,CAACC,IAAI,CAACQ,QAAQ,CAAC;QACtB;MACF;MACA,IAAIF,GAAG,GAAG,CAAC,EAAE;QACXE,QAAQ,GAAGb,IAAI,CAACY,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC;QAC7B,IAAI,CAACE,QAAQ,CAACH,SAAS,EAAE;UACvBN,KAAK,CAACC,IAAI,CAACQ,QAAQ,CAAC;QACtB;MACF;MACA,IAAIF,GAAG,GAAGX,IAAI,CAAC,CAAC,CAAC,CAACM,MAAM,GAAG,CAAC,EAAE;QAC5BO,QAAQ,GAAGb,IAAI,CAACY,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC;QAC7B,IAAI,CAACE,QAAQ,CAACH,SAAS,EAAE;UACvBN,KAAK,CAACC,IAAI,CAACQ,QAAQ,CAAC;QACtB;MACF;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}