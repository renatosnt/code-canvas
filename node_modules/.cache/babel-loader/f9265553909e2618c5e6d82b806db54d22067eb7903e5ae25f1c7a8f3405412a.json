{"ast":null,"code":"/**\n *\n * @param {matriz de objetos} grid\n * @param {objeto Node} start\n * @param {objeto Node} finish\n */\n\n// {\n//   row,\n//   col,\n//   isStart,\n//   isFinish,\n//   isWall,\n//   isVisited,\n//   onMouseDown,\n//   onMouseUp,\n//   onMouseEnter,\n// }\n\nexport function dfs(grid, start, finish) {\n  const [numRows, numCols] = [grid.length, grid[0].length];\n  const stack = [];\n  const path = [];\n  stack.push(start);\n  while (stack.length) {\n    const curr = stack.pop();\n    if (curr.isFinish) {\n      return path;\n    }\n    if (!curr.isVisited) {\n      curr.isVisited = true;\n      path.push(curr);\n    }\n    const [i, j] = [curr.row, curr.col];\n    if (j + 1 <= numCols) {\n      stack.push(grid[i][j + 1]);\n    }\n    if (j - 1 >= 0) {\n      stack.push(grid[i][j - 1]);\n    }\n    if (i + 1 <= numRows) {\n      stack.push(grid[i + 1][j]);\n    }\n    if (i - 1 >= 0) {\n      stack.push(grid[i - 1][j]);\n    }\n  }\n}","map":{"version":3,"names":["dfs","grid","start","finish","numRows","numCols","length","stack","path","push","curr","pop","isFinish","isVisited","i","j","row","col"],"sources":["/home/renato/Documents/code-canvas/src/algorithms/dfs.js"],"sourcesContent":["/**\n *\n * @param {matriz de objetos} grid\n * @param {objeto Node} start\n * @param {objeto Node} finish\n */\n\n// {\n//   row,\n//   col,\n//   isStart,\n//   isFinish,\n//   isWall,\n//   isVisited,\n//   onMouseDown,\n//   onMouseUp,\n//   onMouseEnter,\n// }\n\nexport function dfs(grid, start, finish) {\n  const [numRows, numCols] = [grid.length, grid[0].length];\n  const stack = [];\n  const path = [];\n\n  stack.push(start);\n\n  while (stack.length) {\n    const curr = stack.pop();\n\n    if (curr.isFinish) {\n      return path;\n    }\n\n    if (!curr.isVisited) {\n      curr.isVisited = true;\n      path.push(curr);\n    }\n\n    const [i, j] = [curr.row, curr.col];\n\n    if (j + 1 <= numCols) {\n      stack.push(grid[i][j + 1]);\n    }\n    if (j - 1 >= 0) {\n      stack.push(grid[i][j - 1]);\n    }\n    if (i + 1 <= numRows) {\n      stack.push(grid[i + 1][j]);\n    }\n    if (i - 1 >= 0) {\n      stack.push(grid[i - 1][j]);\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACvC,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAG,CAACJ,IAAI,CAACK,MAAM,EAAEL,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC;EACxD,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,IAAI,GAAG,EAAE;EAEfD,KAAK,CAACE,IAAI,CAACP,KAAK,CAAC;EAEjB,OAAOK,KAAK,CAACD,MAAM,EAAE;IACnB,MAAMI,IAAI,GAAGH,KAAK,CAACI,GAAG,EAAE;IAExB,IAAID,IAAI,CAACE,QAAQ,EAAE;MACjB,OAAOJ,IAAI;IACb;IAEA,IAAI,CAACE,IAAI,CAACG,SAAS,EAAE;MACnBH,IAAI,CAACG,SAAS,GAAG,IAAI;MACrBL,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC;IACjB;IAEA,MAAM,CAACI,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACL,IAAI,CAACM,GAAG,EAAEN,IAAI,CAACO,GAAG,CAAC;IAEnC,IAAIF,CAAC,GAAG,CAAC,IAAIV,OAAO,EAAE;MACpBE,KAAK,CAACE,IAAI,CAACR,IAAI,CAACa,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B;IACA,IAAIA,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;MACdR,KAAK,CAACE,IAAI,CAACR,IAAI,CAACa,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5B;IACA,IAAID,CAAC,GAAG,CAAC,IAAIV,OAAO,EAAE;MACpBG,KAAK,CAACE,IAAI,CAACR,IAAI,CAACa,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;IAC5B;IACA,IAAID,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;MACdP,KAAK,CAACE,IAAI,CAACR,IAAI,CAACa,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;IAC5B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}