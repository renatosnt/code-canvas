{"ast":null,"code":"/**\n *\n * @param {matriz de objetos} grid\n * @param {objeto Node} start\n * @param {objeto Node} finish\n */\n\n// {\n//   row,\n//   col,\n//   isStart,\n//   isFinish,\n//   isWall,\n//   isVisited,\n//   onMouseDown,\n//   onMouseUp,\n//   onMouseEnter,\n// }\n\nexport function dfs(grid, start, finish) {\n  const [numRows, numCols] = [grid.length, grid[0].length];\n  const visited = new Set();\n  const path = [];\n  function dfsAux(i, j) {\n    if (i > numRows || j > numCols || i < 0 || j < 0 || visited.has([i, j])) {\n      return;\n    }\n    console.log(\"visitando\", [i, j]);\n    visited.add([i, j]);\n    path.push([i, j]);\n    if (!grid[i][j].isFinish) {\n      dfsAux(i, j + 1);\n      dfsAux(i + 1, j);\n      dfsAux(i - 1, j);\n      dfsAux(i, j - 1);\n    }\n    return true;\n  }\n  dfsAux(start.row, start.col);\n  return path;\n  // def dfs(i, j):\n  //     if i >= len(grid) or j >= len(grid[0]) or i < 0 or j < 0 or \\\n  //      grid[i][j] == \"0\" or (i, j) in visited:\n  //         return\n  //     visited.add((i, j))\n  //     dfs(i, j + 1)\n  //     dfs(i + 1, j)\n  //     dfs(i - 1, j)\n  //     dfs(i, j - 1)\n}","map":{"version":3,"names":["dfs","grid","start","finish","numRows","numCols","length","visited","Set","path","dfsAux","i","j","has","console","log","add","push","isFinish","row","col"],"sources":["/home/renato/Documents/code-canvas/src/algorithms/dfs.js"],"sourcesContent":["/**\n *\n * @param {matriz de objetos} grid\n * @param {objeto Node} start\n * @param {objeto Node} finish\n */\n\n// {\n//   row,\n//   col,\n//   isStart,\n//   isFinish,\n//   isWall,\n//   isVisited,\n//   onMouseDown,\n//   onMouseUp,\n//   onMouseEnter,\n// }\n\nexport function dfs(grid, start, finish) {\n  const [numRows, numCols] = [grid.length, grid[0].length];\n  const visited = new Set();\n  const path = [];\n\n  function dfsAux(i, j) {\n    if (i > numRows || j > numCols || i < 0 || j < 0 || visited.has([i, j])) {\n      return;\n    }\n\n    console.log(\"visitando\", [i, j]);\n    visited.add([i, j]);\n    path.push([i, j]);\n    if (!grid[i][j].isFinish) {\n      dfsAux(i, j + 1);\n      dfsAux(i + 1, j);\n      dfsAux(i - 1, j);\n      dfsAux(i, j - 1);\n    }\n    return true;\n  }\n  dfsAux(start.row, start.col);\n  return path;\n  // def dfs(i, j):\n  //     if i >= len(grid) or j >= len(grid[0]) or i < 0 or j < 0 or \\\n  //      grid[i][j] == \"0\" or (i, j) in visited:\n  //         return\n  //     visited.add((i, j))\n  //     dfs(i, j + 1)\n  //     dfs(i + 1, j)\n  //     dfs(i - 1, j)\n  //     dfs(i, j - 1)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACvC,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAG,CAACJ,IAAI,CAACK,MAAM,EAAEL,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC;EACxD,MAAMC,OAAO,GAAG,IAAIC,GAAG,EAAE;EACzB,MAAMC,IAAI,GAAG,EAAE;EAEf,SAASC,MAAM,CAACC,CAAC,EAAEC,CAAC,EAAE;IACpB,IAAID,CAAC,GAAGP,OAAO,IAAIQ,CAAC,GAAGP,OAAO,IAAIM,CAAC,GAAG,CAAC,IAAIC,CAAC,GAAG,CAAC,IAAIL,OAAO,CAACM,GAAG,CAAC,CAACF,CAAC,EAAEC,CAAC,CAAC,CAAC,EAAE;MACvE;IACF;IAEAE,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,CAACJ,CAAC,EAAEC,CAAC,CAAC,CAAC;IAChCL,OAAO,CAACS,GAAG,CAAC,CAACL,CAAC,EAAEC,CAAC,CAAC,CAAC;IACnBH,IAAI,CAACQ,IAAI,CAAC,CAACN,CAAC,EAAEC,CAAC,CAAC,CAAC;IACjB,IAAI,CAACX,IAAI,CAACU,CAAC,CAAC,CAACC,CAAC,CAAC,CAACM,QAAQ,EAAE;MACxBR,MAAM,CAACC,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC;MAChBF,MAAM,CAACC,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC;MAChBF,MAAM,CAACC,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC;MAChBF,MAAM,CAACC,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC;IAClB;IACA,OAAO,IAAI;EACb;EACAF,MAAM,CAACR,KAAK,CAACiB,GAAG,EAAEjB,KAAK,CAACkB,GAAG,CAAC;EAC5B,OAAOX,IAAI;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}