[{"/home/renato/Documents/code-canvas/src/index.js":"1","/home/renato/Documents/code-canvas/src/App.js":"2","/home/renato/Documents/code-canvas/src/Grid.js":"3","/home/renato/Documents/code-canvas/src/Node.js":"4","/home/renato/Documents/code-canvas/src/Header.js":"5","/home/renato/Documents/code-canvas/src/Menu.js":"6","/home/renato/Documents/code-canvas/src/algorithms/dfs.js":"7","/home/renato/Documents/code-canvas/src/algorithms/bfs.js":"8","/home/renato/Documents/code-canvas/src/Help.js":"9","/home/renato/Documents/code-canvas/src/Footer.js":"10"},{"size":232,"mtime":1672924784414,"results":"11","hashOfConfig":"12"},{"size":209,"mtime":1672947849799,"results":"13","hashOfConfig":"12"},{"size":7086,"mtime":1673382115041,"results":"14","hashOfConfig":"12"},{"size":569,"mtime":1673381644946,"results":"15","hashOfConfig":"12"},{"size":283,"mtime":1673383281586,"results":"16","hashOfConfig":"12"},{"size":1021,"mtime":1673380386375,"results":"17","hashOfConfig":"12"},{"size":1331,"mtime":1673381588071,"results":"18","hashOfConfig":"12"},{"size":1252,"mtime":1673381564191,"results":"19","hashOfConfig":"12"},{"size":1481,"mtime":1673362556634,"results":"20","hashOfConfig":"12"},{"size":804,"mtime":1673380162800,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"z14k0p",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/renato/Documents/code-canvas/src/index.js",[],[],[],"/home/renato/Documents/code-canvas/src/App.js",[],[],"/home/renato/Documents/code-canvas/src/Grid.js",["56","57","58","59","60","61","62"],[],"import React from \"react\";\nimport Node from \"./Node\";\nimport \"./Grid.css\";\nimport Menu from \"./Menu\";\nimport { dfs } from \"./algorithms/dfs\";\nimport { bfs } from \"./algorithms/bfs\";\nimport Help from \"./Help\";\nimport Footer from \"./Footer\";\n\nconst Grid = () => {\n  const [rows, cols] = [17, 50];\n  const [gridSize, setGridSize] = React.useState([rows, cols]);\n  const [startCoordinates, setStartCoordinates] = React.useState([7, 1]);\n  const [finishCoordinates, setFinishCoordinates] = React.useState([7, 34]);\n  const [warningState, setWarningState] = React.useState(false);\n\n  const [isRunning, setIsRunning] = React.useState(false);\n  const [isDrawing, setIsDrawing] = React.useState(false);\n  const [isMoving, setIsMoving] = React.useState(false);\n  const [movingNode, setMovingNode] = React.useState(null);\n  const [openHelp, setOpenHelp] = React.useState(false);\n\n  const [grid, setGrid] = React.useState([]);\n\n  function nodeConstructor(row, col) {\n    const node = {\n      row,\n      col,\n      isStart: row === startCoordinates[0] && col === startCoordinates[1],\n      isFinish: row === finishCoordinates[0] && col === finishCoordinates[1],\n      isWall: false,\n      isVisited: false,\n      previous: null,\n    };\n    return node;\n  }\n\n  function gridConstructor() {\n    const initialGrid = [];\n    const sizeRows = gridSize[0];\n    const sizeCols = gridSize[1];\n\n    for (let i = 0; i <= sizeRows; i++) {\n      const row = [];\n      for (let j = 0; j <= sizeCols; j++) {\n        row.push(nodeConstructor(i, j));\n      }\n      initialGrid.push(row);\n    }\n    return initialGrid;\n  }\n\n  function startDrawing(event, row, col) {\n    event.preventDefault();\n    if (isRunning) return;\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      setIsDrawing(true);\n    } else {\n      if (grid[row][col].isStart) {\n        grid[row][col].isStart = false;\n        setMovingNode(\"start\");\n      } else {\n        grid[row][col].isFinish = false;\n        setMovingNode(\"finish\");\n      }\n      setIsMoving(true);\n    }\n  }\n\n  function finishDrawing(event, row, col) {\n    event.preventDefault();\n    if (isDrawing) {\n      setIsDrawing(false);\n    }\n    if (isMoving) {\n      const newGrid = grid.slice();\n      if (movingNode === \"start\") {\n        newGrid[row][col].isStart = true;\n        setStartCoordinates([row, col]);\n      } else if (movingNode === \"finish\") {\n        newGrid[row][col].isFinish = true;\n        setFinishCoordinates([row, col]);\n      }\n      setGrid(newGrid);\n      setMovingNode(null);\n      setIsMoving(false);\n    }\n  }\n\n  function draw(event, row, col) {\n    if (isRunning) return;\n    if (\n      (isDrawing || event.type === \"click\") &&\n      !grid[row][col].isStart &&\n      !grid[row][col].isFinish\n    ) {\n      const newGrid = grid.slice();\n      newGrid[row][col].isWall = true;\n      setGrid(newGrid);\n    }\n  }\n\n  function clearWalls() {\n    if (isRunning) return;\n    const newGrid = grid.slice();\n\n    newGrid.map((row) =>\n      row.map((node) => {\n        node.isWall = false;\n      })\n    );\n    setGrid(newGrid);\n  }\n\n  function runResultingPath(resultingPath) {\n    for (let i = 0; i <= resultingPath.length; i++) {\n      setTimeout(() => {\n        const curr = resultingPath[i];\n        // troca o estilo de acordo com o id\n        const nodeClassName = document.getElementById(\n          `node-${curr.row}-${curr.col}`\n        ).className;\n\n        if (nodeClassName !== \"node start\" && nodeClassName !== \"node finish\") {\n          document.getElementById(`node-${curr.row}-${curr.col}`).className =\n            \"node node-result\";\n        }\n      }, 25 * i);\n    }\n  }\n\n  function runAnimation(visitedNodes, resultingPath) {\n    visitedNodes.shift();\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        // animar resultingPath\n        setTimeout(() => {\n          runResultingPath(resultingPath);\n        }, 25 * i);\n      }\n      setTimeout(() => {\n        const curr = visitedNodes[i];\n        // troca o estilo de acordo com o id\n        const nodeClassName = document.getElementById(\n          `node-${curr.row}-${curr.col}`\n        ).className;\n\n        if (nodeClassName !== \"node start\" && nodeClassName !== \"node finish\") {\n          document.getElementById(`node-${curr.row}-${curr.col}`).className =\n            \"node node-visited\";\n        }\n      }, 25 * i);\n    }\n  }\n\n  function backtrackPath(finish) {\n    const path = [];\n    let curr = finish;\n    while (curr !== null) {\n      path.unshift(curr);\n      curr = curr.previous;\n    }\n\n    return path;\n  }\n\n  function runAlgorithm(algorithm) {\n    if (isRunning) return;\n    setIsRunning(true);\n    const start = grid[startCoordinates[0]][startCoordinates[1]];\n    const finish = grid[finishCoordinates[0]][finishCoordinates[1]];\n\n    switch (algorithm) {\n      case \"dfs\":\n        var visitedNodes = dfs(grid, start, finish);\n        break;\n      case \"dijkstra\":\n        break;\n      case \"bfs\":\n        var visitedNodes = bfs(grid, start, finish);\n        break;\n      default:\n        break;\n    }\n\n    const path = backtrackPath(finish);\n    runAnimation(visitedNodes, path);\n  }\n\n  function resetGrid() {\n    setWarningState(false);\n    setIsRunning(false);\n\n    setGrid(gridConstructor());\n    var highestTimeoutId = setTimeout(\";\");\n    for (var i = 0; i < highestTimeoutId; i++) {\n      clearTimeout(i);\n    }\n    grid.map((row) => {\n      row.map((node) => {\n        const nodeElement = document.getElementById(\n          `node-${node.row}-${node.col}`\n        );\n        if (\n          nodeElement.className !== \"node start\" &&\n          nodeElement.className !== \"node finish\"\n        ) {\n          nodeElement.className = \"node\";\n        }\n      });\n    });\n  }\n\n  function showWarning() {\n    if (isRunning) setWarningState(true);\n  }\n\n  React.useEffect(() => {\n    const newGrid = gridConstructor();\n    setGrid(newGrid);\n    setOpenHelp(true);\n  }, []);\n\n  return (\n    <>\n      <Menu\n        clearWalls={clearWalls}\n        resetGrid={resetGrid}\n        runAlgorithm={runAlgorithm}\n        openHelp={openHelp}\n        setOpenHelp={setOpenHelp}\n        warningState={warningState}\n      />\n      <Help open={openHelp} setOpenHelp={setOpenHelp} />\n      <table\n        className={isMoving ? \"grid grid-on-moving\" : \"grid\"}\n        onClick={showWarning}\n      >\n        <tbody>\n          {grid.map((row, i) => (\n            <tr key={i}>\n              {row.map((node, idx) => (\n                <Node\n                  {...node}\n                  key={idx}\n                  onMouseDown={(event) =>\n                    startDrawing(event, node.row, node.col)\n                  }\n                  onMouseUp={(event) =>\n                    finishDrawing(event, node.row, node.col)\n                  }\n                  onMouseEnter={(event) => draw(event, node.row, node.col)}\n                  onClick={(event) => draw(event, node.row, node.col)}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <Footer />\n    </>\n  );\n};\n\nexport default Grid;\n","/home/renato/Documents/code-canvas/src/Node.js",[],[],"/home/renato/Documents/code-canvas/src/Header.js",["63"],[],"import React from \"react\";\nimport \"./Header.css\";\nimport logo from \"./img/logo.png\";\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <img src={logo}></img>\n      <h1 className=\"title\">Pathfinding Visualizer</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","/home/renato/Documents/code-canvas/src/Menu.js",[],[],"/home/renato/Documents/code-canvas/src/algorithms/dfs.js",[],[],"/home/renato/Documents/code-canvas/src/algorithms/bfs.js",[],[],"/home/renato/Documents/code-canvas/src/Help.js",["64","65","66"],[],"import React from \"react\";\nimport \"./Help.css\";\nimport wall from \"./img/wall.gif\";\nimport select from \"./img/select.gif\";\nimport move from \"./img/move.gif\";\n\nconst Help = ({ open, setOpenHelp }) => {\n  if (!open) return null;\n  return (\n    <div className=\"overlay\" onClick={() => setOpenHelp(!open)}>\n      <div className=\"modal-help\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"text-wall\">\n          <p>\n            Click to add walls. Walls are impassable nodes, which will be\n            ignored by the algorithms.\n            <br></br>\n            To remove them click\n            <span className=\"clear-walls\"> CLEAR WALLS</span>.\n          </p>\n        </div>\n\n        <div className=\"text-move\">\n          <p>\n            Drag-and-drop to move the start and destination nodes. You can put\n            them anywhere.\n          </p>\n        </div>\n\n        <div className=\"text-run\">\n          <p>\n            Choose among the available algorithms and click{\" \"}\n            <span className=\"run\">RUN </span>\n            to see them running. To run it again, click\n            <span className=\"reset-grid\"> RESET GRID</span>.\n          </p>\n        </div>\n\n        <img className=\"gif\" src={wall}></img>\n        <img className=\"gif\" src={move}></img>\n        <img className=\"gif\" src={select}></img>\n\n        <button className=\"ok-btn\" onClick={() => setOpenHelp(!open)}>\n          OK\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Help;\n","/home/renato/Documents/code-canvas/src/Footer.js",[],[],{"ruleId":"67","severity":1,"message":"68","line":12,"column":20,"nodeType":"69","messageId":"70","endLine":12,"endColumn":31},{"ruleId":"71","severity":1,"message":"72","line":108,"column":22,"nodeType":"73","messageId":"74","endLine":108,"endColumn":24},{"ruleId":"75","severity":1,"message":"76","line":180,"column":13,"nodeType":"69","messageId":"77","endLine":180,"endColumn":25},{"ruleId":"78","severity":1,"message":"79","line":195,"column":28,"nodeType":"80","messageId":"81","endLine":195,"endColumn":43},{"ruleId":"71","severity":1,"message":"72","line":199,"column":20,"nodeType":"73","messageId":"74","endLine":199,"endColumn":22},{"ruleId":"71","severity":1,"message":"72","line":200,"column":22,"nodeType":"73","messageId":"74","endLine":200,"endColumn":24},{"ruleId":"82","severity":1,"message":"83","line":222,"column":6,"nodeType":"84","endLine":222,"endColumn":8,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":8,"column":7,"nodeType":"88","endLine":8,"endColumn":23},{"ruleId":"86","severity":1,"message":"87","line":38,"column":9,"nodeType":"88","endLine":38,"endColumn":41},{"ruleId":"86","severity":1,"message":"87","line":39,"column":9,"nodeType":"88","endLine":39,"endColumn":41},{"ruleId":"86","severity":1,"message":"87","line":40,"column":9,"nodeType":"88","endLine":40,"endColumn":43},"no-unused-vars","'setGridSize' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-redeclare","'visitedNodes' is already defined.","redeclared","no-implied-eval","Implied eval. Consider passing a function instead of a string.","CallExpression","impliedEval","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'gridConstructor'. Either include it or remove the dependency array.","ArrayExpression",["89"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"90","fix":"91"},"Update the dependencies array to be: [gridConstructor]",{"range":"92","text":"93"},[5936,5938],"[gridConstructor]"]